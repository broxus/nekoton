extern crate core;

#[cfg(test)]
pub mod tests {
    use ed25519_dalek::ed25519::signature::Signature;
    use ed25519_dalek::Signer;
    use nekoton::core::models::{
        ContractState, Expiration, PendingTransaction, Transaction, TransactionAdditionalInfo,
        TransactionWithData, TransactionsBatchInfo,
    };
    use nekoton::core::native_wallet::WalletType::HighloadWalletV2;
    use nekoton::core::native_wallet::*;
    use nekoton::crypto::MnemonicType;
    use nekoton::transport::gql::GqlTransport;
    use nekoton_transport::gql::{GqlClient, GqlNetworkSettings};
    use nekoton_utils::SimpleClock;
    use reqwest::{StatusCode, Url};
    use serde::{Deserialize, Serialize};
    use std::sync::Arc;
    use std::time::Duration;
    use ton_block::{Account, AccountState, AccountStorage, AccountStuff, Deserializable};

    struct TestHandler {}

    impl TonWalletSubscriptionHandler for TestHandler {
        fn on_message_sent(&self, _: PendingTransaction, _: Option<Transaction>) {
            ()
        }

        fn on_message_expired(&self, _: PendingTransaction) {
            ()
        }

        fn on_state_changed(&self, _: ContractState) {
            ()
        }

        fn on_transactions_found(
            &self,
            _: Vec<TransactionWithData<TransactionAdditionalInfo>>,
            _: TransactionsBatchInfo,
        ) {
            ()
        }
    }

    pub async fn get_contract_state(
        contract_address: &str,
    ) -> Option<nekoton::transport::models::ExistingContract> {
        let client = reqwest::Client::new();
        let states_rpc_endpoint =
            Url::parse("https://jrpc.everwallet.net/rpc").expect("Bad rpc endpoint");

        #[derive(Serialize)]
        struct Address {
            pub address: String,
        }

        #[derive(Serialize)]
        struct Test {
            pub jsonrpc: String,
            pub id: u8,
            pub method: String,
            pub params: Address,
        }

        #[derive(Deserialize)]
        struct Response {
            pub result: Option<nekoton::transport::models::ExistingContract>,
        }

        let body = Test {
            jsonrpc: "2.0".to_string(),
            id: 1,
            method: "getContractState".to_string(),
            params: Address {
                address: contract_address.to_string(),
            },
        };

        let response = client
            .post(states_rpc_endpoint)
            .json(&body)
            .send()
            .await
            .expect("Failed sending request");

        if let StatusCode::OK = response.status() {
            let response: Response = response.json().await.expect("Failed parsing");
            response.result
        } else {
            None
        }
    }

    #[tokio::test]
    async fn prepare_highload_transfer() -> () {
        let client = GqlClient::new(GqlNetworkSettings {
            endpoints: vec![
                "main2.ton.dev".to_string(),
                "main3.ton.dev".to_string(),
                "main4.ton.dev".to_string(),
            ],
            latency_detection_interval: Duration::from_secs(1),
            ..Default::default()
        })
        .expect("Failed to init GQL");
        let clock = Arc::new(SimpleClock);
        let transport = Arc::new(GqlTransport::new(client));

        let test_mnemonic =
            "razor advice advance announce palace decide tone catch fat journey position recipe";
        let key_pair =
            nekoton::crypto::mnemonic::derive_from_phrase(test_mnemonic, MnemonicType::Bip39, 0)
                .expect("Failed to derive from mnemonic");

        let handler = Arc::new(TestHandler {});

        let wallet = TonWallet::subscribe(
            clock,
            transport,
            0,
            key_pair.public.clone(),
            HighloadWalletV2,
            handler,
        )
        .await
        .expect("failed wallet");

        //corrupted init data
        //let data = "";

        //Valid init data
        let data = "te6ccgECDAEAAWAAAnXABhDQdHogSStQjoLW9eQAaoTI1T1xPMcgiEu6n9CR2AgSGIIbwxR37wAAAGIQ6yPxFcR4a2LEu9PTQAMBAVkAAAAAYnnF5eriq+R5WnzkE2NmY3Kbv7TOxaJjG0hQ6ePvBIvGlHKcA6LkwcACABOgMTzjO0sdik9AART/APSkE/S88sgLBAIBIAcFAerygwjXGCDTH9M/+COqH1MgufJj7UTQ0x/TP9P/9ATRU2CAQPQOb6Ex8mBRc7ryogf5AVQQh/kQ8qMC9ATR+AB/jhYhgBD0eG+lIJgC0wfUMAH7AJEy4gGz5luDJaHIQDSAQPRDiuYxyBLLHxPLP8v/9ADJ7VQGADQggED0lm+lMlEQlDBTA7neIJMzNgGSMjDiswIBSAsIAgEgCgkAQb5fl2omhpj5jpn+n/mPoCaKkQQCB6BzfQmMktv8ld0fFAAXvZznaiaGmvmOuF/8AATQMA==";

        let account = Account::construct_from_base64(data).expect("Failed to construct account");

        let account_state = match account.state() {
            Some(state) => state.clone(),
            None => panic!("No account state"),
        };

        let state_init = match account_state.clone() {
            AccountState::AccountActive { state_init } => state_init,
            _ => panic!("Account is not active"),
        };

        let mut gifts = Vec::new();
        for _ in 0..1 {
            let gift = Gift {
                flags: 3,
                bounce: false,
                destination: wallet.address().clone(),
                amount: 10,
                body: None,
                state_init: Some(state_init.clone()),
            };
            gifts.push(gift);
        }

        let address = wallet.address().to_string();

        let state = get_contract_state(&address).await.unwrap();

        let fake_account_stuff = AccountStuff {
            addr: state.account.addr,
            storage_stat: state.account.storage_stat,
            storage: AccountStorage {
                last_trans_lt: state.account.storage.last_trans_lt,
                balance: state.account.storage.balance,
                state: account_state,
                init_code_hash: state.account.storage.init_code_hash,
            },
        };

        let transfer_action = highload_wallet_v2::prepare_transfer(
            &SimpleClock,
            &key_pair.public,
            &fake_account_stuff,
            gifts,
            Expiration::Timeout(1000),
        )
        .expect("Failed to prepare transfer");

        let message = match transfer_action {
            TransferAction::DeployFirst => highload_wallet_v2::prepare_deploy(
                &SimpleClock,
                &key_pair.public,
                0,
                Expiration::Timeout(1000),
            )
            .expect("Failed to prepare deploy"),
            TransferAction::Sign(message) => message,
        };

        let signature = key_pair.sign(message.hash());
        let mut ex_sign = [0u8; 64];
        ex_sign.copy_from_slice(signature.as_bytes());

        message.sign(&ex_sign).expect("Failed to sign message");
    }
}
