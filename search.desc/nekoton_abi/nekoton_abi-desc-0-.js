searchState.loadedDescShard("nekoton_abi", 0, "Contains the error value\nAdditional estimated lag for the pending message to be …\nThere is a known point in time at which this specific …\n<code>TokenValue::Optional</code> which always store its value in the …\nContains the success value\nThere is no way to determine the point in time at which …\nTries to parse text as boc, encodes as comment otherwise\nCreates slice data from base64 encoded boc\nCreates slice data with string, encoded as comment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds input param\nAdds input param\nAdds input param\nAdds input param\nSets the input params to the specified\nSets the input params to the specified\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the exact id is known\nConverts last transaction id into real or fake id\nAdds output param\nAdds output param\nSets the output params to the specified\nExecutes message without mutating the account state.\nExecutes message and mutates the account state.\nConsumes account and executes message without mutating the …\nParses transactions with provided extractors\nReturns <code>Err</code> if there are duplicate <code>function_ids</code>\nReturns <code>Err</code> if there are duplicate <code>function_ids</code> or …\nMatches out messages with <code>event_id</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMatches in messages with <code>function_id</code> and applies bounce …\nMatches all messages with in <code>function_id</code>.\nMatches all messages with out <code>function_id</code>\nThe index of the message in the transaction\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe index of the message in the transaction\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")